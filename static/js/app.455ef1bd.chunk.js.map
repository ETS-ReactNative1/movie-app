{"version":3,"sources":["components/Detail/Link.js","utils.js","components/ScrollContainer.js","api.js","components/Poster.js","components/Votes.js","screens/Detail/DetailPresenter.js","screens/Detail/DetailContainer.js","screens/Detail/index.js","components/Movies/Slide.js","components/Vertical.js","components/Horizontal.js","components/Title.js","components/HorizontalSlider.js","components/List.js","screens/Movies/MoviesPresenter.js","screens/Movies/index.js","screens/Movies/MoviesContainer.js","screens/Tv/TvPresenter.js","screens/Tv/index.js","screens/Tv/TvContainer.js","components/Search/Input.js","screens/Search/SearchPresenter.js","screens/Search/index.js","screens/Search/SearchContainer.js","screens/Favs/FavsPresenter.js","screens/Favs/index.js","screens/Favs/FavsContainer.js","navigation/Stack.js","navigation/Tabs.js","App.js","web-build/register-service-worker.js","assets/splash.png"],"names":["Container","styled","View","Text","Link","onPress","text","icon","FontAwesome","name","color","size","style","trimText","limit","length","slice","formatDate","date","Date","toLocaleDateString","day","month","year","ScrollContainer","loading","children","backgroundColor","contentContainerStyle","refreshFn","useState","refreshing","setRefreshing","refreshControl","RefreshControl","onRefresh","a","async","enabled","tintColor","flex","justifyContent","ActivityIndicator","propTypes","PropTypes","bool","isRequired","string","node","object","func","makeRequest","path","params","axios","get","api_key","getAnything","results","data","console","log","movieApi","region","query","id","append_to_response","tvApi","apiImage","defaultPoster","Image","Poster","url","source","uri","Votes","votes","BG","Header","Dimensions","height","Info","Title","Data","DataName","DataValue","openBrowser","result","paddingBottom","backgroundImage","poster","Divider","title","overview","marginTop","spoken_languages","map","l","release_date","status","runtime","first_air_date","genres","g","index","number_of_episodes","number_of_seasons","imdb_id","videos","video","key","DetailContainer","navigation","route","isTv","detail","setDetail","useEffect","getDetail","backdrop_path","poster_path","vote_average","getData","React","useLayoutEffect","setOptions","DetailPresenter","WebBrowser","Content","VotesContainer","Overview","Slide","useNavigation","Button","Platform","OS","theme","roundness","mode","uppercase","compact","navigate","number","Vertical","ReleaseDate","Horizontal","releaseDate","HorizontalSlider","ScrollView","marginBottom","paddingLeft","horizontal","showsHorizontalScrollIndicator","List","HEIGHT","width","SliderContainer","nowPlaying","popular","upcoming","controlsProps","dotsTouchable","prevPos","nextPos","nextTitle","dotsPos","nextTitleStyle","fontSize","fontWeight","PrevComponent","loop","timeout","movie","original_title","MovieContainer","nowPlayingError","popularError","upcomingError","movies","setMovies","MoviesPresenter","topRated","today","show","thisWeek","todayError","thisWeekError","topRatedError","shows","setShows","TvPresenter","Input","placeholder","value","onChange","onSubmit","Searchbar","marginHorizontal","marginVertical","paddingHorizontal","returnKeyType","onChangeText","onSubmitEditing","keyword","paddingTop","SearchContainer","setKeyword","movieError","showsError","setResults","SearchPresenter","WIDTH","styles","top","position","topIndex","setTopIndex","nextCard","currentValue","Animated","ValueXY","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","evt","dx","dy","setValue","x","y","onPanResponderRelease","spring","toValue","start","roationValues","interpolate","inputRange","outputRange","extrapolate","secondCardOpacity","secondCardScale","zIndex","transform","rotate","getTranslateTransform","panHandlers","opacity","scale","FavsContainer","error","FavsPresenter","Stack","createStackNavigator","Navigator","screenOptions","headerStyle","borderBottomColor","shadowColor","headerTintColor","headerBackTitleVisible","Screen","component","Movies","Detail","b","Tv","c","Search","d","Favs","Tabs","createMaterialBottomTabNavigator","activeColor","inactiveColor","barStyle","initialRouteName","options","tabBarColor","tabBarIcon","focused","Ionicons","App","isReady","setIsReady","NavigationContainer","StatusBar","AppLoading","startAsync","images","image","prefetch","Asset","fromModule","downloadAsync","cacheImages","require","fonts","font","Font","cacheFonts","Promise","all","onFinish","onError","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","module","exports"],"mappings":"0mBAKA,IAAMA,EAAYC,IAAOC,KAAV,KAMTC,EAAOF,IAAOE,KAAV,KAeKC,EATF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,KAAlB,OACX,kBAAC,IAAD,CAAkBF,QAASA,GACzB,kBAACL,EAAD,KACE,kBAACQ,EAAA,EAAD,CAAaC,KAAMF,EAAMG,MAAM,QAAQC,KAAM,KAC7C,kBAACR,EAAD,CAAMS,MAAO,CAAEF,MAAO,UAAYJ,MCrB3BO,EAAW,eAACP,EAAD,uDAAQ,GAAIQ,EAAZ,8CACtBR,EAAKS,OAASD,EAAWR,EAAKU,MAAM,EAAGF,GAAvC,MAAqDR,GAE1CW,EAAa,SAAAC,GAExB,OADgB,IAAIC,KAAKD,GACVE,mBAAmB,KAAM,CACtCC,IAAK,UACLC,MAAO,OACPC,KAAM,a,0lBCFV,IAAMC,EAAkB,SAAC,GAMlB,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,sBACAC,EACI,EADJA,UACI,EACgCC,oBAAS,GADzC,WACGC,EADH,KACeC,EADf,KAOJ,OACE,kBAAC,IAAD,CACEC,eACE,kBAACC,EAAA,EAAD,CACEC,UATU,oBAAAC,EAAAC,OAAA,uDAChBL,GAAc,GADE,WAAAI,EAAA,MAEVP,KAFU,OAGhBG,GAAc,GAHE,6DAUVD,WAAYA,EACZO,SAAS,EACTC,UAAW,UAGf3B,MAAO,CAAEe,gBAAiBA,GAC1BC,sBAAqB,GACnBY,KAAMf,EAAU,EAAI,EACpBgB,eAAgBhB,EAAU,SAAW,cAClCG,IAGJH,EAAU,kBAACiB,EAAA,EAAD,CAAmBhC,MAAM,QAAQC,KAAK,UAAae,IAKpEF,EAAgBmB,UAAY,CAC1BlB,QAASmB,IAAUC,KAAKC,WACxBnB,gBAAiBiB,IAAUG,OAAOD,WAClCpB,SAAUkB,IAAUI,KAAKF,WACzBlB,sBAAuBgB,IAAUK,OACjCpB,UAAWe,IAAUM,MAGR1B,Q,mlBC/Cf,IAEM2B,EAAc,SAACC,EAAMC,GAAP,OAClBC,IAAMC,IAAN,+BAAyCH,EAAQ,CAC/CC,OAAO,KACFA,EADC,CAEJG,QANW,wCAUXC,EAAc,SAAOL,GAAP,iCAAAhB,EAAAC,OAAA,uDAAagB,EAAb,+BAAsB,GAAtB,oBAAAjB,EAAA,MAKNe,EAAYC,EAAMC,IALZ,uBAGNK,EAHM,EAGdC,KAAQD,QACRC,EAJc,EAIdA,KAJc,kBAMT,CAACD,GAAWC,EAAM,OANT,yCAQhBC,QAAQC,IAAR,MARgB,kBAST,CAAC,KAAD,OATS,kEAaPC,GACC,kBAAML,EAAY,uBADnBK,GAEF,kBAAML,EAAY,mBAFhBK,GAGD,kBAAML,EAAY,kBAAmB,CAAEM,OAAQ,QAH9CD,GAIH,SAAAE,GAAK,OAAIP,EAAY,gBAAiB,CAAEO,WAJrCF,GAKJ,SAAAG,GAAE,OAAIR,EAAY,UAAUQ,EAAM,CAAEC,mBAAoB,YALpDJ,GAMD,kBAAML,EAAY,oBAGjBU,GACJ,kBAAMV,EAAY,qBADdU,GAED,kBAAMV,EAAY,mBAFjBU,GAGD,kBAAMV,EAAY,kBAHjBU,GAIF,kBAAMV,EAAY,gBAJhBU,GAKH,SAAAH,GAAK,OAAIP,EAAY,aAAc,CAAEO,WALlCG,GAML,SAAAF,GAAE,OAAIR,EAAY,OAAOQ,EAAM,CAAEC,mBAAoB,YAGhDE,GAAW,SACtBhB,GADsB,IAEtBiB,EAFsB,uDAEN,wIAFM,OAGlBjB,EAAI,kCAAqCA,EAASiB,G,oICzCxD,IAAMC,GAAQrE,IAAOqE,MAAV,MAMLC,GAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAAa,kBAAC,GAAD,CAAOC,OAAQ,CAAEC,IAAKN,GAASI,OAE3DD,GAAO5B,UAAY,CACjB6B,IAAK5B,IAAUG,QAGFwB,U,+JCdf,IAAMvE,GAAYC,IAAOE,KAAV,MASAwE,GAFD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,kBAAC,GAAD,qBAAeA,EAAf,U,wiCCC7B,IAAMC,GAAK5E,IAAOqE,MAAV,MAOFQ,GAAS7E,IAAOC,KAAV,KACA6E,KAAWxB,IAAI,UAAUyB,OAAS,GAKxChF,GAAYC,IAAOC,KAAV,MAMT+E,GAAOhF,IAAOC,KAAV,MAKJgF,GAAQjF,IAAOE,KAAV,MAOLgF,GAAOlF,IAAOC,KAAV,MAKJkF,GAAWnF,IAAOE,KAAV,MASRkF,GAAYpF,IAAOE,KAAV,MAMA,qBAAGmF,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,OAAQ9D,EAAxB,EAAwBA,QAAxB,OACb,kBAAC,EAAD,CACEA,SAAS,EACTE,gBAAiB4D,EAAO5D,gBACxBC,sBAAuB,CAAE4D,cAAe,KAExC,oCACE,kBAACV,GAAD,KACE,kBAACD,GAAD,CAAIJ,OAAQ,CAAEC,IAAKN,GAASmB,EAAOE,gBAAiB,QACpD,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQjB,IAAKe,EAAOG,SACpB,kBAACT,GAAD,KACE,kBAACU,EAAA,EAAD,MACA,kBAAC,GAAD,KAAQJ,EAAOK,OACdL,EAAOX,MAAQ,kBAAC,GAAD,CAAOA,MAAOW,EAAOX,QAAY,KACjD,kBAACe,EAAA,EAAD,SAIN,kBAACR,GAAD,KACGI,EAAOM,SACN,oCACE,kBAACF,EAAA,EAAD,MACA,kBAACP,GAAD,iBACA,kBAACC,GAAD,KAAYE,EAAOM,UACnB,kBAACF,EAAA,EAAD,OAEA,KACHlE,EACC,kBAACiB,EAAA,EAAD,CAAmB9B,MAAO,CAAEkF,UAAW,IAAMpF,MAAO,UAClD,KACH6E,EAAOQ,iBACN,oCACE,kBAACJ,EAAA,EAAD,MACA,kBAACP,GAAD,kBACA,kBAACC,GAAD,KACGE,EAAOQ,iBAAiBC,KAAI,SAAAC,GAAC,OAAOA,EAAExF,KAAT,QAEhC,kBAACkF,EAAA,EAAD,OAEA,KACHJ,EAAOW,aACN,oCACE,kBAACP,EAAA,EAAD,MACA,kBAACP,GAAD,qBACA,kBAACC,GAAD,KAAYpE,EAAWsE,EAAOW,eAC9B,kBAACP,EAAA,EAAD,OAEA,KACHJ,EAAOY,OACN,oCACE,kBAACR,EAAA,EAAD,MACA,kBAACP,GAAD,eACA,kBAACC,GAAD,KAAYE,EAAOY,QACnB,kBAACR,EAAA,EAAD,OAEA,KACHJ,EAAOa,QACN,oCACE,kBAACT,EAAA,EAAD,MACA,kBAACP,GAAD,gBACA,kBAACC,GAAD,KAAYE,EAAOa,QAAnB,YACA,kBAACT,EAAA,EAAD,OAEA,KACHJ,EAAOc,eACN,oCACE,kBAACV,EAAA,EAAD,MACA,kBAACP,GAAD,uBACA,kBAACC,GAAD,KAAYpE,EAAWsE,EAAOc,iBAC9B,kBAACV,EAAA,EAAD,OAEA,KACHJ,EAAOe,OACN,oCACE,kBAACX,EAAA,EAAD,MACA,kBAACP,GAAD,eACA,kBAACC,GAAD,KACGE,EAAOe,OAAON,KAAI,SAACO,EAAGC,GAAJ,OACjBA,EAAQ,IAAMjB,EAAOe,OAAOvF,OAASwF,EAAE9F,KAAU8F,EAAE9F,KAAnD,SAGJ,kBAACkF,EAAA,EAAD,OAEA,KACHJ,EAAOkB,mBACN,oCACE,kBAACd,EAAA,EAAD,MACA,kBAACP,GAAD,2BACA,kBAACC,GAAD,KACGE,EAAOmB,kBADV,MACgCnB,EAAOkB,oBAEvC,kBAACd,EAAA,EAAD,OAEA,KACHJ,EAAOoB,QACN,oCACE,kBAAChB,EAAA,EAAD,MACA,kBAACP,GAAD,cACA,kBAAC,EAAD,CACE9E,KAAM,YACNC,KAAM,OACNF,QAAS,kBACPiF,EAAY,8BAA8BC,EAAOoB,YAGrD,kBAAChB,EAAA,EAAD,OAEA,MACH,SAAAJ,EAAOqB,OAAOlD,cAAd,IAAuB3C,QAAS,EAC/B,oCACE,kBAAC4E,EAAA,EAAD,MACA,kBAACP,GAAD,eACCG,EAAOqB,OAAOlD,QAAQsC,KAAI,SAAAa,GAAK,OAC9B,kBAAC,EAAD,CACEvG,KAAMuG,EAAMpG,KACZqG,IAAKD,EAAM5C,GACX1D,KAAK,eACLF,QAAS,kBACPiF,EAAY,mCAAmCuB,EAAMC,WAI3D,kBAACnB,EAAA,EAAD,OAEA,S,qkBCtLG,ICJAoB,GDIA,YAcR,IAbLC,EAaI,EAbJA,WAaI,IAZJC,MACE5D,OACE6D,EAUA,EAVAA,KACAjD,EASA,EATAA,GACA2B,EAQA,EARAA,MACAH,EAOA,EAPAA,gBACAC,EAMA,EANAA,OACAd,EAKA,EALAA,MACAiB,EAIA,EAJAA,SACAlE,EAGA,EAHAA,gBAGA,EACwBG,mBAAS,CACnCL,SAAS,EACT8D,OAAQ,CACNK,QACAH,kBACAC,SACAG,WACAjB,QACAgC,OAAQ,CACNlD,QAAS,IAEX/B,qBAZA,WACGwF,EADH,KACWC,EADX,KAiCJC,qBAAU,YAlBM,uBAAAjF,EAAAC,OAAA,oDACsB6E,EADtB,kCAAA9E,EAAA,MAEJ+B,GAAWF,IAFP,2DAAA7B,EAAA,MAGJ0B,GAAeG,IAHX,4CACPqD,EADO,UAIdF,EAAU,CACR3F,SAAS,EACT8D,OAAO,MACF+B,EADC,CAEJ1B,MAAO0B,EAAU1B,OAAS0B,EAAU7G,KACpCgF,gBAAiB6B,EAAUC,cAC3B7B,OAAQ4B,EAAUE,YAClB3B,SAAUyB,EAAUzB,SACpBjB,MAAO0C,EAAUG,aACjB9F,sBAbU,6DAmBd+F,KACC,CAACzD,IACJ0D,IAAMC,iBAAgB,WACpBZ,EAAWa,WAAW,CAAEjC,aAM1B,OAAO,kBAACkC,GAAD,KAAiBxC,YAJJ,SAAMd,GAAN,SAAApC,EAAAC,OAAA,kEAAAD,EAAA,MACZ2F,IAA4BvD,IADhB,8DAIkC2C,K,83BEpDxD,IAAMnH,GAAYC,IAAOC,KAAV,MAKT2E,GAAK5E,IAAOqE,MAAV,MAOF0D,GAAU/H,IAAOC,KAAV,MAOPiF,GAAOlF,IAAOC,KAAV,MAKJgF,GAAQjF,IAAOE,KAAV,MAOL8H,GAAiBhI,IAAOC,KAAV,MAEdgI,GAAWjI,IAAOE,KAAV,MAMRgI,GAAQ,SAAC,GAQR,IAPLlE,EAOI,EAPJA,GACA2B,EAMI,EANJA,MACAH,EAKI,EALJA,gBACAb,EAII,EAJJA,MACAiB,EAGI,EAHJA,SACAH,EAEI,EAFJA,OACA/D,EACI,EADJA,gBAEMqF,EAAaoB,2BAWnB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAI3D,OAAQ,CAAEC,IAAKN,GAASqB,MAC5B,kBAACuC,GAAD,KACE,kBAAC,GAAD,CAAQxD,IAAKkB,IACb,kBAAC,GAAD,KACE,kBAAC,GAAD,KAAQ7E,EAAS+E,EAAO,KACxB,kBAACqC,GAAD,KACE,kBAAC,GAAD,CAAOrD,MAAOA,KAEhB,kBAACsD,GAAD,KAAWrH,EAASgF,EAAU,KAC9B,kBAACwC,GAAA,EAAD,CACEzH,MACkB,QAAhB0H,IAASC,GAAe,CAAEzC,UAAW,IAAO,CAAEA,UAAW,IAE3DpF,MAAM,UACN8H,MAAO,CAAEC,UAAW,GACpBC,KAAK,YACLC,WAAW,EACXC,SAAS,EACTvI,QA9BS,kBACjB2G,EAAW6B,SAAS,SAAU,CAC5B5E,KACA2B,QACAH,kBACAb,QACAiB,WACAH,SACA/D,sBAaI,oBAmBVwG,GAAMxF,UAAY,CAChBsB,GAAIrB,IAAUkG,OAAOhG,WACrB8C,MAAOhD,IAAUG,OAAOD,WACxB2C,gBAAiB7C,IAAUG,OAAOD,WAClC8B,MAAOhC,IAAUkG,OAAOhG,WACxB+C,SAAUjD,IAAUG,OAAOD,WAC3B4C,OAAQ9C,IAAUG,OAAOD,YAGZqF,U,oPCnGf,IAAMnI,GAAYC,IAAOC,KAAV,MAKTgF,GAAQjF,IAAOE,KAAV,MAML4I,GAAW,SAAC,GAOX,IAAD,IANJ7B,YAMI,SALJjD,EAKI,EALJA,GACAyB,EAII,EAJJA,OACAE,EAGI,EAHJA,MACAhB,EAEI,EAFJA,MACAjD,EACI,EADJA,gBAEMqF,EAAaoB,2BAWnB,OACE,kBAAC,IAAD,CAAkB/H,QAXF,WAChB2G,EAAW6B,SAAS,SAAU,CAC5B3B,OACAjD,KACA2B,QACAF,SACAd,QACAjD,sBAKA,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQ6C,IAAKkB,IACb,kBAAC,GAAD,KAAQ7E,EAAS+E,EAAO,KACvBhB,EAAQ,GAAK,kBAAC,GAAD,CAAOA,MAAOA,OAMpCmE,GAASpG,UAAY,CACnBsB,GAAIrB,IAAUkG,OAAOhG,WACrB4C,OAAQ9C,IAAUG,OAClB6C,MAAOhD,IAAUG,OAAOD,WACxB8B,MAAOhC,IAAUkG,OAAOhG,YAGXiG,U,opBCjDf,IAAM/I,GAAYC,IAAOC,KAAV,MAOTiF,GAAOlF,IAAOC,KAAV,MAMJgF,GAAQjF,IAAOE,KAAV,MAML6I,GAAc/I,IAAOE,KAAV,MAMX+H,GAAWjI,IAAOE,KAAV,MAKR8I,GAAa,SAAC,GAQb,IAAD,IAPJ/B,YAOI,SANJjD,EAMI,EANJA,GACA2B,EAKI,EALJA,MACAF,EAII,EAJJA,OACAG,EAGI,EAHJA,SACAqD,EAEI,EAFJA,YACAvH,EACI,EADJA,gBAEMqF,EAAaoB,2BAYnB,OACE,kBAAC,IAAD,CAAkB/H,QAZF,WAChB2G,EAAW6B,SAAS,SAAU,CAC5B3B,OACAjD,KACA2B,QACAF,SACAG,WACAqD,cACAvH,sBAKA,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQ6C,IAAKkB,IACb,kBAAC,GAAD,KACE,kBAAC,GAAD,KAAQ7E,EAAS+E,EAAO,KACvBsD,EACC,kBAACF,GAAD,KAAc/H,EAAWiI,IACvB,KACJ,kBAAC,GAAD,KAAWrI,EAASgF,EAAU,SAMxCoD,GAAWtG,UAAY,CACrBsB,GAAIrB,IAAUkG,OAAOhG,WACrB8C,MAAOhD,IAAUG,OAAOD,WACxBoG,YAAatG,IAAUG,OACvB2C,OAAQ9C,IAAUG,OAAOD,WACzB+C,SAAUjD,IAAUG,OAAOD,YAGdmG,U,kJC9Ef,IAAM9I,GAAOF,IAAOE,KAAV,MAOJ+E,GAAQ,SAAC,GAAD,IAAGU,EAAH,EAAGA,MAAH,OAAe,kBAAC,GAAD,KAAOA,IAEpCV,GAAMvC,UAAY,CAChBiD,MAAOhD,IAAUG,OAAOD,YAGXoC,U,iBCZTiE,GAAmB,SAAC,GAAD,IAAGvD,EAAH,EAAGA,MAAOlE,EAAV,EAAUA,SAAV,OACvB,kBAACxB,GAAA,EAAD,KACE,kBAAC,GAAD,CAAO0F,MAAOA,IACd,kBAACwD,GAAA,EAAD,CACExI,MAAO,CAAEkF,UAAW,GAAIuD,aAAc,IACtCzH,sBAAuB,CAAE0H,YAAa,IACtCC,YAAU,EACVC,gCAAgC,GAE/B9H,KAKPyH,GAAiBxG,UAAY,CAC3BiD,MAAOhD,IAAUG,OAAOD,WACxBpB,SAAUkB,IAAUI,KAAKF,YAGZqG,U,sFCpBf,IAAMnJ,GAAYC,IAAOC,KAAV,MAWAuJ,GAPF,SAAC,GAAD,IAAG7D,EAAH,EAAGA,MAAOlE,EAAV,EAAUA,SAAV,OACX,oCACE,kBAAC,GAAD,CAAOkE,MAAOA,IACd,kBAAC,GAAD,KAAYlE,K,iMCEyBqD,KAAWxB,IAAI,UAA1BmG,I,GAAtBC,M,GAAc3E,QAEhB4E,GAAkB3J,IAAOC,KAAV,KAETwJ,GAAS,GAIf1J,GAAYC,IAAOC,KAAV,MAEA,mBAAG2B,EAAH,EAAGA,UAAWJ,EAAd,EAAcA,QAASoI,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,SAA5C,OACb,kBAAC,EAAD,CACElI,UAAWA,EACXJ,QAASA,EACTE,gBAAiB,WAEjB,oCACE,kBAACiI,GAAD,KACE,kBAAC,KAAD,CACEI,cAAe,CACbC,eAAe,EACfC,QAAS,cACTC,QAAS,eACTC,UAAW,OACXC,SAAS,EACTC,eAAgB,CACd5J,MAAO,MACP6J,SAAU,GACVC,WAAY,OAEdC,cAAe,gBAAGpK,EAAH,EAAGA,QAAH,OACb,kBAAC,IAAD,CAAkBA,QAASA,GACzB,kBAAC,KAAD,CACEO,MAAO,CAAEF,MAAO,SAAU6J,SAAU,GAAIC,WAAY,QAEnD,WAKTE,MAAI,EACJC,QAAS,GAERd,EAAW7D,KAAI,SAAA4E,GAAK,OACnB,kBAAC,GAAD,CACE9D,IAAK8D,EAAM3G,GACXA,GAAI2G,EAAM3G,GACV2B,MAAOgF,EAAMC,eACbhF,SAAU+E,EAAM/E,SAChBjB,MAAOgG,EAAMnD,aACbhC,gBAAiBmF,EAAMrD,cACvB7B,OAAQkF,EAAMpD,YACd7F,gBAAiB,iBAKzB,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAkBiE,MAAO,kBACtBkE,EAAQ9D,KAAI,SAAA4E,GAAK,OAChB,kBAAC,GAAD,CACE3G,GAAI2G,EAAM3G,GACV6C,IAAK8D,EAAM3G,GACXyB,OAAQkF,EAAMpD,YACd5B,MAAOgF,EAAMhF,MACbhB,MAAOgG,EAAMnD,aACb9F,gBAAiB,gBAKvB,kBAAC,GAAD,CAAMiE,MAAM,eACTmE,EAAS/D,KAAI,SAAA4E,GAAK,OACjB,kBAAC,GAAD,CACE9D,IAAK8D,EAAM3G,GACXA,GAAI2G,EAAM3G,GACV2B,MAAOgF,EAAMhF,MACbsD,YAAa0B,EAAM1E,aACnBR,OAAQkF,EAAMpD,YACd3B,SAAU+E,EAAM/E,SAChBlE,gBAAiB,oBC5FhBmJ,GCGA,WAAO,IAAD,EACShJ,mBAAS,CACnCL,SAAS,EACToI,WAAY,GACZC,QAAS,GACTC,SAAU,GACVgB,gBAAiB,KACjBC,aAAc,KACdC,cAAe,OARE,WACZC,EADY,KACJC,EADI,KAUbzD,EAAU,gDAAAtF,EAAAC,OAAA,kEAAAD,EAAA,MAC8B0B,MAD9B,kCACP+F,EADO,KACKkB,EADL,gBAAA3I,EAAA,MAEwB0B,MAFxB,kCAEPgG,EAFO,KAEEkB,EAFF,iBAAA5I,EAAA,MAG0B0B,MAH1B,4BAGPiG,EAHO,KAGGkB,EAHH,KAIdE,EAAU,CACR1J,SAAS,EACToI,aACAC,UACAC,WACAgB,kBACAC,eACAC,kBAXY,8DAkBhB,OAJA5D,qBAAU,WACRK,MACC,IAEI,kBAAC0D,GAAD,KAAiBvJ,UAAW6F,GAAawD,K,sFCxBlD,IAAMlL,GAAYC,IAAOC,KAAV,MAIA,mBAAG2B,EAAH,EAAGA,UAAWJ,EAAd,EAAcA,QAASqI,EAAvB,EAAuBA,QAASuB,EAAhC,EAAgCA,SAAUC,EAA1C,EAA0CA,MAA1C,OACb,kBAAC,EAAD,CACEzJ,UAAWA,EACXJ,QAASA,EACTE,gBAAiB,WAEjB,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAkBiE,MAAM,iBACrBkE,EAAQ9D,KAAI,SAAAuF,GAAI,OACf,kBAAC,GAAD,CACErE,MAAM,EACNjD,GAAIsH,EAAKtH,GACT6C,IAAKyE,EAAKtH,GACVyB,OAAQ6F,EAAK/D,YACb5B,MAAO2F,EAAK9K,KACZmE,MAAO2G,EAAK9D,aACZ9F,gBAAiB,gBAIvB,kBAAC,GAAD,CAAkBiE,MAAM,aACrByF,EAASrF,KAAI,SAAAuF,GAAI,OAChB,kBAAC,GAAD,CACErE,MAAM,EACNjD,GAAIsH,EAAKtH,GACT6C,IAAKyE,EAAKtH,GACVyB,OAAQ6F,EAAK/D,YACb5B,MAAO2F,EAAK9K,KACZmE,MAAO2G,EAAK9D,aACZ9F,gBAAiB,gBAIvB,kBAAC,GAAD,CAAMiE,MAAM,gBACT0F,EAAMtF,KAAI,SAAAuF,GAAI,OACb,kBAAC,GAAD,CACErE,MAAM,EACNJ,IAAKyE,EAAKtH,GACVA,GAAIsH,EAAKtH,GACT2B,MAAO2F,EAAK9K,KACZiF,OAAQ6F,EAAK/D,YACb3B,SAAU0F,EAAK1F,SACflE,gBAAiB,mBCrDd3B,GCGA,WAAO,IAAD,EACO8B,mBAAS,CACjCL,SAAS,EACT6J,MAAO,GACPE,SAAU,GACVH,SAAU,GACVvB,QAAS,GACT2B,WAAY,KACZC,cAAe,KACfC,cAAe,KACfX,aAAc,OAVG,WACZY,EADY,KACLC,EADK,KAYbnE,EAAU,wDAAAtF,EAAAC,OAAA,kEAAAD,EAAA,MACoB+B,MADpB,kCACPmH,EADO,KACAG,EADA,gBAAArJ,EAAA,MAE0B+B,MAF1B,kCAEPqH,EAFO,KAEGE,EAFH,iBAAAtJ,EAAA,MAG0B+B,MAH1B,mCAGPkH,EAHO,KAGGM,EAHH,iBAAAvJ,EAAA,MAIwB+B,MAJxB,4BAIP2F,EAJO,KAIEkB,EAJF,KAKda,EAAS,CACPpK,SAAS,EACT6J,QACAE,WACAH,WACAvB,UACA2B,aACAC,gBACAC,gBACAX,iBAdY,8DAoBhB,OAHA3D,qBAAU,WACRK,MACC,IACI,kBAACoE,GAAD,KAAajK,UAAW6F,GAAakE,K,UChCxCG,GAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,SAAjC,OACZ,kBAACC,GAAA,EAAD,CACExL,MAAO,CACLyL,iBAAkB,GAClBC,eAAgB,EAChBC,kBAAmB,GACnBlD,aAAc,IAEhBb,MAAO,CAAEC,UAAW,IACpBuD,YAAaA,EACbQ,cAAe,SACfC,aAAcP,EACdQ,gBAAiBP,EACjBF,MAAOA,KAIXF,GAAMpJ,UAAY,CAChBqJ,YAAapJ,IAAUG,OAAOD,WAC9BmJ,MAAOrJ,IAAUG,OAAOD,WACxBoJ,SAAUtJ,IAAUM,KAAKJ,WACzBqJ,SAAUvJ,IAAUM,KAAKJ,YAGZiJ,UCtBA,mBAAGb,EAAH,EAAGA,OAAQU,EAAX,EAAWA,MAAOe,EAAlB,EAAkBA,QAAST,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAArC,OACb,kBAAC,EAAD,CACEtK,UAAWsK,EACX1K,SAAS,EACTE,gBAAiB,UACjBC,sBAAuB,CACrBgL,WAAY,KAGd,kBAAC,GAAD,CACEZ,YAAa,kBACbC,MAAOU,EACPT,SAAUA,EACVC,SAAUA,IAEO,IAAlBjB,EAAOnK,QACN,kBAAC,GAAD,CAAkB6E,MAAO,iBACtBsF,EAAOlF,KAAI,SAAA4E,GAAK,OACf,kBAAC,GAAD,CACE9D,IAAK8D,EAAM3G,GACXA,GAAI2G,EAAM3G,GACVW,MAAOgG,EAAMnD,aACb7B,MAAOgF,EAAMhF,MACbF,OAAQkF,EAAMpD,aAAeoD,EAAMrD,cACnC5F,gBAAiB,gBAKP,IAAjBiK,EAAM7K,QACL,kBAAC,GAAD,CAAkB6E,MAAO,cACtBgG,EAAM5F,KAAI,SAAAuF,GAAI,OACb,kBAAC,GAAD,CACErE,MAAM,EACNJ,IAAKyE,EAAKtH,GACVA,GAAIsH,EAAKtH,GACTW,MAAO2G,EAAK9D,aACZ7B,MAAO2F,EAAK9K,KACZiF,OAAQ6F,EAAK/D,YACb7F,gBAAiB,kBC5CdkL,GCGA,WAAO,IAAD,EACW/K,mBAAS,IADpB,WACZ6K,EADY,KACHG,EADG,OAEWhL,mBAAS,CACrCoJ,OAAQ,GACRU,MAAO,GACPmB,WAAY,KACZC,WAAY,OANK,WAEZtJ,EAFY,KAEHuJ,EAFG,KAuBnB,OACE,kBAACC,GAAD,OACMxJ,EADN,CAEEwI,SAlBa,SAAA5L,GAAI,OAAIwM,EAAWxM,IAmBhC6L,SAlBW,wCAAA/J,EAAAC,OAAA,mDACG,KAAZsK,EADS,mEAAAvK,EAAA,MAIsB0B,GAAgB6I,IAJtC,kCAINzB,EAJM,KAIE6B,EAJF,iBAAA3K,EAAA,MAKqB+B,GAAawI,IALlC,4BAKNf,EALM,KAKCoB,EALD,KAMbC,EAAW,CACT/B,SACAU,QACAmB,aACAC,eAVW,8DAmBXL,QAASA,M,01BC1B0B5H,KAAWxB,IAAI,UAAzC4J,G,GAAPxD,MAAsBD,G,GAAR1E,OAEhBhF,GAAYC,IAAOC,KAAV,MAMTqE,GAAStE,IAAOqE,MAAV,MAMN8I,GAAS,CACbC,IAAK,GACLrI,OAAQ0E,GAAS,IACjBC,MAAO,MACP2D,SAAU,YAGG,eAAkB,IAAf5J,EAAc,EAAdA,QAAc,EACE5B,mBAAS,GADX,WACvByL,EADuB,KACbC,EADa,KAExBC,EAAW,kBAAMD,GAAY,SAAAE,GAAY,OAAIA,EAAe,MAC5DJ,EAAW,IAAIK,KAASC,QACxBC,EAAeC,KAAaC,OAAO,CACvCC,6BAA8B,kBAAM,GACpCC,mBAAoB,SAACC,EAAD,GAAsB,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,GAC9Bd,EAASe,SAAS,CAAEC,EAAGH,EAAII,EAAGH,KAEhCI,sBAAuB,SAACN,EAAD,GAAsB,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,GAC7BD,GAAM,IACRR,KAASc,OAAOnB,EAAU,CACxBoB,QAAS,CACPJ,EAAGnB,GAAQ,IACXoB,EAAGH,KAEJO,MAAMlB,GACAU,IAAO,IAChBR,KAASc,OAAOnB,EAAU,CACxBoB,QAAS,CACPJ,GAAInB,GAAQ,IACZoB,EAAGH,KAEJO,MAAMlB,GAETE,KAASc,OAAOnB,EAAU,CACxBoB,QAAS,CACPJ,EAAG,EACHC,EAAG,KAEJI,WAIHC,EAAgBtB,EAASgB,EAAEO,YAAY,CAC3CC,WAAY,EAAE,IAAK,EAAG,KACtBC,YAAa,CAAC,QAAS,OAAQ,QAC/BC,YAAa,UAETC,EAAoB3B,EAASgB,EAAEO,YAAY,CAC/CC,WAAY,EAAE,IAAK,EAAG,KACtBC,YAAa,CAAC,EAAG,GAAK,GACtBC,YAAa,UAETE,EAAkB5B,EAASgB,EAAEO,YAAY,CAC7CC,WAAY,EAAE,IAAK,EAAG,KACtBC,YAAa,CAAC,EAAG,GAAK,GACtBC,YAAa,UAKf,OAHA3H,qBAAU,WACRiG,EAASe,SAAS,CAAEC,EAAG,EAAGC,EAAG,MAC5B,CAAChB,IAEF,kBAAC,GAAD,KACG7J,EAAQsC,KAAI,SAACT,EAAQiB,GACpB,OAAIA,EAAQ+G,EACH,KACE/G,IAAU+G,EAEjB,kBAACI,GAAA,EAASzN,KAAV,KACEU,MAAK,MACAwM,GADA,CAEH+B,OAAQ,EACRC,UAAU,CACR,CAAEC,OAAQT,IADH,WAEJtB,EAASgC,4BAGhBxI,IAAKvB,EAAOtB,IACR4J,EAAa0B,aAEjB,kBAAC,GAAD,CAAQ9K,OAAQ,CAAEC,IAAKN,GAASmB,EAAOiC,iBAGlChB,IAAU+G,EAAW,EAE5B,kBAACI,GAAA,EAASzN,KAAV,KACEU,MAAK,MACAwM,GADA,CAEH+B,QAAS3I,EACTgJ,QAASP,EACTG,UAAW,CAAC,CAAEK,MAAOP,MAEvBpI,IAAKvB,EAAOtB,IACR4J,EAAa0B,aAEjB,kBAAC,GAAD,CAAQ9K,OAAQ,CAAEC,IAAKN,GAASmB,EAAOiC,iBAKzC,kBAACmG,GAAA,EAASzN,KAAV,KACEU,MAAK,MACAwM,GADA,CAEH+B,QAAS3I,EACTgJ,QAAS,IAEX1I,IAAKvB,EAAOtB,IACR4J,EAAa0B,aAEjB,kBAAC,GAAD,CAAQ9K,OAAQ,CAAEC,IAAKN,GAASmB,EAAOiC,sBC9HtCkI,GCGA,WAAO,IAAD,EACS5N,mBAAS,CACnC4B,QAAS,GACTiM,MAAO,OAHU,WACZzE,EADY,KACJC,EADI,KAenB,OAHA9D,qBAAU,YAPM,yBAAAjF,EAAAC,OAAA,kEAAAD,EAAA,MACiB0B,MADjB,2BACPJ,EADO,KACEiM,EADF,KAEdxE,EAAU,CACRzH,UACAiM,UAJY,4DAQdjI,KACC,IACI,kBAACkI,GAAkB1E,ICZtB2E,GAAQC,cAED1N,GAAI,kBACf,kBAACyN,GAAME,UAAP,CACEC,cAAe,CACbC,YAAa,CACXtO,gBAAiB,UACjBuO,kBAAmB,UACnBC,YAAa,WAEfC,gBAAiB,QACjBC,wBAAwB,IAG1B,kBAACR,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWC,KACvC,kBAACX,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWE,OAG9BC,GAAI,kBACf,kBAACb,GAAME,UAAP,CACEC,cAAe,CACbC,YAAa,CACXtO,gBAAiB,UACjBuO,kBAAmB,UACnBC,YAAa,WAEfC,gBAAiB,QACjBC,wBAAwB,IAG1B,kBAACR,GAAMS,OAAP,CAAc7P,KAAK,KAAK8P,UAAWI,KACnC,kBAACd,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWE,OAG9BG,GAAI,kBACf,kBAACf,GAAME,UAAP,CACEC,cAAe,CACbC,YAAa,CACXtO,gBAAiB,UACjBuO,kBAAmB,UACnBC,YAAa,WAEfC,gBAAiB,QACjBC,wBAAwB,IAG1B,kBAACR,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWM,KACvC,kBAAChB,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWE,OAG9BK,GAAI,kBACf,kBAACjB,GAAME,UAAP,CACEC,cAAe,CACbC,YAAa,CACXtO,gBAAiB,UACjBuO,kBAAmB,UACnBC,YAAa,WAEfC,gBAAiB,QACjBC,wBAAwB,IAG1B,kBAACR,GAAMS,OAAP,CAAc7P,KAAK,YAAY8P,UAAWQ,KAC1C,kBAAClB,GAAMS,OAAP,CAAc7P,KAAK,SAAS8P,UAAWE,OChErCO,GAAOC,cAEE,cACb,OACE,kBAACD,GAAKjB,UAAN,CACEmB,YAAY,UACZC,cAAc,UACdC,SAAU,CAAEzP,gBAAiB,WAC7B0P,iBAAiB,UAEjB,kBAACL,GAAKV,OAAN,CACEgB,QAAS,CACPC,YAAa,UACbC,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,kBAACC,EAAA,EAAD,CACEjR,KAAsB,QAAhB6H,IAASC,GAAe,WAAa,UAC3C7H,MAAO+Q,EAAU,QAAU,OAC3B9Q,KAAM,OAIZF,KAAK,SACL8P,UAAWnO,KAEb,kBAAC4O,GAAKV,OAAN,CACEgB,QAAS,CACPC,YAAa,UACbC,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,kBAACC,EAAA,EAAD,CACEjR,KAAsB,QAAhB6H,IAASC,GAAe,SAAW,QACzC7H,MAAO+Q,EAAU,QAAU,OAC3B9Q,KAAM,OAIZF,KAAK,KACL8P,UAAWG,KAEb,kBAACM,GAAKV,OAAN,CACEgB,QAAS,CACPC,YAAa,UACbC,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,kBAACC,EAAA,EAAD,CACEjR,KAAsB,QAAhB6H,IAASC,GAAe,aAAe,YAC7C7H,MAAO+Q,EAAU,QAAU,OAC3B9Q,KAAM,OAIZF,KAAK,SACL8P,UAAWK,KAEb,kBAACI,GAAKV,OAAN,CACEgB,QAAS,CACPC,YAAa,UACbC,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACV,kBAACC,EAAA,EAAD,CACEjR,KAAsB,QAAhB6H,IAASC,GAAe,YAAc,WAC5C7H,MAAO+Q,EAAU,QAAU,OAC3B9Q,KAAM,OAIZF,KAAK,YACL8P,UAAWO,O,mCChDJ,SAASa,KAAO,IAAD,EACE7P,oBAAS,GADX,WACrB8P,EADqB,KACZC,EADY,KAW5B,OAAOD,EACL,kBAAC,IAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,GAAD,OAEF,kBAACC,EAAA,EAAD,CAAWX,SAAS,mBAGtB,kBAACY,EAAA,EAAD,CACEC,WAlBe,WACjB,IAAMC,EAfU,SAAAA,GAAM,OACxBA,EAAOlM,KAAI,SAAAmM,GACT,MAAqB,kBAAVA,EACF7N,IAAM8N,SAASD,GAEfE,IAAMC,WAAWH,GAAOI,mBAUlBC,CAAY,CACzB,wIACAC,EAAQ,OAEJC,EAVS,SAAAA,GAAK,OACtBA,EAAM1M,KAAI,SAAA2M,GAAI,MAAI,CAACC,IAAeD,GAAOC,IAAeD,OASxCE,CAAW,CAACnB,IAASiB,KAAMnS,IAAYmS,OACrD,OAAOG,QAAQC,IAAR,cAAgBb,GAAhB,IAA2BQ,MAahCM,SAXa,kBAAMnB,GAAW,IAY9BoB,QAASrP,QAAQ+L,U,+DC1CnB,kBAAmBuD,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAASC,OAGdC,OAAM,SAAS/D,GACd/L,QAAQ6P,KAAK,oCAAqC9D,U,oBCV1DgE,EAAOC,QAAU,IAA0B,qC","file":"static/js/app.455ef1bd.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesome } from '@expo/vector-icons';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nconst Container = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 5px;\n`;\n\nconst Text = styled.Text`\n  font-weight: 600;\n  margin-right: 10px;\n  margin-left: 10px;\n`;\n\nconst Link = ({ onPress, text, icon }) => (\n  <TouchableOpacity onPress={onPress}>\n    <Container>\n      <FontAwesome name={icon} color=\"white\" size={22} />\n      <Text style={{ color: 'white' }}>{text}</Text>\n    </Container>\n  </TouchableOpacity>\n);\n\nexport default Link;\n","export const trimText = (text = '', limit) =>\n  text.length > limit ? `${text.slice(0, limit)}...` : text;\n\nexport const formatDate = date => {\n  const theDate = new Date(date);\n  return theDate.toLocaleDateString('ko', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ActivityIndicator } from 'react-native-paper';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { RefreshControl } from 'react-native';\n\nconst ScrollContainer = ({\n  loading,\n  children,\n  backgroundColor,\n  contentContainerStyle,\n  refreshFn\n}) => {\n  const [refreshing, setRefreshing] = useState(false);\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await refreshFn();\n    setRefreshing(false);\n  };\n  return (\n    <ScrollView\n      refreshControl={\n        <RefreshControl\n          onRefresh={onRefresh}\n          refreshing={refreshing}\n          enabled={false}\n          tintColor={'white'}\n        />\n      }\n      style={{ backgroundColor: backgroundColor }}\n      contentContainerStyle={{\n        flex: loading ? 1 : 0,\n        justifyContent: loading ? 'center' : 'flex-start',\n        ...contentContainerStyle\n      }}\n    >\n      {loading ? <ActivityIndicator color=\"white\" size=\"small\" /> : children}\n    </ScrollView>\n  );\n};\n\nScrollContainer.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  backgroundColor: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  contentContainerStyle: PropTypes.object,\n  refreshFn: PropTypes.func\n};\n\nexport default ScrollContainer;\n","import axios from 'axios';\n\nconst TMDB_KEY = '10923b261ba94d897ac6b81148314a3f';\n\nconst makeRequest = (path, params) =>\n  axios.get(`https://api.themoviedb.org/3${path}`, {\n    params: {\n      ...params,\n      api_key: TMDB_KEY\n    }\n  });\n\nconst getAnything = async (path, params = {}) => {\n  try {\n    const {\n      data: { results },\n      data\n    } = await makeRequest(path, params);\n    return [results || data, null];\n  } catch (e) {\n    console.log(e);\n    return [null, e];\n  }\n};\n\nexport const movieApi = {\n  nowPlaying: () => getAnything('/movie/now_playing'),\n  popular: () => getAnything('/movie/popular'),\n  upcoming: () => getAnything('/movie/upcoming', { region: 'kr' }),\n  search: query => getAnything('/search/movie', { query }),\n  movie: id => getAnything(`/movie/${id}`, { append_to_response: 'videos' }),\n  discover: () => getAnything('/discover/movie')\n};\n\nexport const tvApi = {\n  today: () => getAnything('/tv/airing_today'),\n  thisWeek: () => getAnything('/tv/on_the_air'),\n  topRated: () => getAnything('/tv/top_rated'),\n  popular: () => getAnything('/tv/popular'),\n  search: query => getAnything('/search/tv', { query }),\n  show: id => getAnything(`/tv/${id}`, { append_to_response: 'videos' })\n};\n\nexport const apiImage = (\n  path,\n  defaultPoster = 'https://images.unsplash.com/photo-1571847140471-1d7766e825ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=673&q=80'\n) => (path ? `https://image.tmdb.org/t/p/w500${path}` : defaultPoster);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components/native';\nimport { apiImage } from '../api';\n\nconst Image = styled.Image`\n  width: 100px;\n  height: 160px;\n  border-radius: 4px;\n`;\n\nconst Poster = ({ url }) => <Image source={{ uri: apiImage(url) }} />;\n\nPoster.propTypes = {\n  url: PropTypes.string\n};\n\nexport default Poster;\n","import React from 'react';\nimport styled from 'styled-components/native';\n\nconst Container = styled.Text`\n  color: rgb(220, 220, 220);\n  margin-bottom: 7px;\n  font-weight: 500;\n  font-size: 12px;\n`;\n\nconst Votes = ({ votes }) => <Container>⭐️ {votes} / 10</Container>;\n\nexport default Votes;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport { ActivityIndicator, Divider } from 'react-native-paper';\nimport Link from '../../components/Detail/Link';\nimport { formatDate } from '../../utils';\nimport ScrollContainer from '../../components/ScrollContainer';\nimport { apiImage } from '../../api';\nimport { Dimensions } from 'react-native';\nimport Poster from '../../components/Poster';\nimport Votes from '../../components/Votes';\n\nconst BG = styled.Image`\n  width: 100%;\n  height: 100%;\n  opacity: 0.4;\n  position: absolute;\n`;\n\nconst Header = styled.View`\n  height: ${Dimensions.get('window').height / 3}px;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst Container = styled.View`\n  flex-direction: row;\n  align-items: center;\n  top: 30px;\n`;\n\nconst Info = styled.View`\n  width: 50%;\n  margin-left: 40px;\n`;\n\nconst Title = styled.Text`\n  color: white;\n  font-weight: 600;\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n\nconst Data = styled.View`\n  margin-top: 30px;\n  padding: 0px 30px;\n`;\n\nconst DataName = styled.Text`\n  margin-top: 30px;\n  color: white;\n  opacity: 0.8;\n  font-weight: 800;\n  font-size: 17px;\n  margin-bottom: 15px;\n`;\n\nconst DataValue = styled.Text`\n  color: white;\n  opacity: 0.8;\n  font-weight: 500;\n`;\n\nexport default ({ openBrowser, result, loading }) => (\n  <ScrollContainer\n    loading={false}\n    backgroundColor={result.backgroundColor}\n    contentContainerStyle={{ paddingBottom: 80 }}\n  >\n    <>\n      <Header>\n        <BG source={{ uri: apiImage(result.backgroundImage, '-') }} />\n        <Container>\n          <Poster url={result.poster} />\n          <Info>\n            <Divider />\n            <Title>{result.title}</Title>\n            {result.votes ? <Votes votes={result.votes} /> : null}\n            <Divider />\n          </Info>\n        </Container>\n      </Header>\n      <Data>\n        {result.overview ? (\n          <>\n            <Divider />\n            <DataName>Overview</DataName>\n            <DataValue>{result.overview}</DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {loading ? (\n          <ActivityIndicator style={{ marginTop: 30 }} color={'white'} />\n        ) : null}\n        {result.spoken_languages ? (\n          <>\n            <Divider />\n            <DataName>Languages</DataName>\n            <DataValue>\n              {result.spoken_languages.map(l => `${l.name} `)}\n            </DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.release_date ? (\n          <>\n            <Divider />\n            <DataName>Release Date</DataName>\n            <DataValue>{formatDate(result.release_date)}</DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.status ? (\n          <>\n            <Divider />\n            <DataName>Status</DataName>\n            <DataValue>{result.status}</DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.runtime ? (\n          <>\n            <Divider />\n            <DataName>Runtime</DataName>\n            <DataValue>{result.runtime} minutes</DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.first_air_date ? (\n          <>\n            <Divider />\n            <DataName>First Air Date</DataName>\n            <DataValue>{formatDate(result.first_air_date)}</DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.genres ? (\n          <>\n            <Divider />\n            <DataName>Genres</DataName>\n            <DataValue>\n              {result.genres.map((g, index) =>\n                index + 1 === result.genres.length ? g.name : `${g.name}, `\n              )}\n            </DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.number_of_episodes ? (\n          <>\n            <Divider />\n            <DataName>Seasons / Episodes</DataName>\n            <DataValue>\n              {result.number_of_seasons} / {result.number_of_episodes}\n            </DataValue>\n            <Divider />\n          </>\n        ) : null}\n        {result.imdb_id ? (\n          <>\n            <Divider />\n            <DataName>Links</DataName>\n            <Link\n              text={'IMDB Page'}\n              icon={'imdb'}\n              onPress={() =>\n                openBrowser(`https://www.imdb.com/title/${result.imdb_id}`)\n              }\n            />\n            <Divider />\n          </>\n        ) : null}\n        {result.videos.results?.length > 0 ? (\n          <>\n            <Divider />\n            <DataName>Videos</DataName>\n            {result.videos.results.map(video => (\n              <Link\n                text={video.name}\n                key={video.id}\n                icon=\"youtube-play\"\n                onPress={() =>\n                  openBrowser(`https://www.youtube.com/watch?v=${video.key}`)\n                }\n              />\n            ))}\n            <Divider />\n          </>\n        ) : null}\n      </Data>\n    </>\n  </ScrollContainer>\n);\n","import React, { useState, useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport DetailPresenter from './DetailPresenter';\nimport { movieApi, tvApi } from '../../api';\n\nexport default ({\n  navigation,\n  route: {\n    params: {\n      isTv,\n      id,\n      title,\n      backgroundImage,\n      poster,\n      votes,\n      overview,\n      backgroundColor\n    }\n  }\n}) => {\n  const [detail, setDetail] = useState({\n    loading: true,\n    result: {\n      title,\n      backgroundImage,\n      poster,\n      overview,\n      votes,\n      videos: {\n        results: []\n      },\n      backgroundColor\n    }\n  });\n  const getData = async () => {\n    const [getDetail, getDetailError] = isTv\n      ? await tvApi.show(id)\n      : await movieApi.movie(id);\n    setDetail({\n      loading: false,\n      result: {\n        ...getDetail,\n        title: getDetail.title || getDetail.name,\n        backgroundImage: getDetail.backdrop_path,\n        poster: getDetail.poster_path,\n        overview: getDetail.overview,\n        votes: getDetail.vote_average,\n        backgroundColor\n      }\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, [id]);\n  React.useLayoutEffect(() => {\n    navigation.setOptions({ title });\n  });\n  const openBrowser = async url => {\n    await WebBrowser.openBrowserAsync(url);\n  };\n\n  return <DetailPresenter openBrowser={openBrowser} {...detail} />;\n};\n","import DetailContainer from './DetailContainer';\nexport default DetailContainer;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-native-paper';\nimport { Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport Poster from '../Poster';\nimport Votes from '../Votes';\nimport { trimText } from '../../utils';\nimport { apiImage } from '../../api';\nconst Container = styled.View`\n  height: 100%;\n  width: 100%;\n`;\n\nconst BG = styled.Image`\n  height: 100%;\n  width: 100%;\n  opacity: 0.4;\n  position: absolute;\n`;\n\nconst Content = styled.View`\n  height: 100%;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n`;\n\nconst Data = styled.View`\n  width: 50%;\n  align-items: flex-start;\n`;\n\nconst Title = styled.Text`\n  color: white;\n  font-weight: bold;\n  font-size: 19px;\n  margin-bottom: 10px;\n`;\n\nconst VotesContainer = styled.View``;\n\nconst Overview = styled.Text`\n  color: rgb(220, 220, 220);\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Slide = ({\n  id,\n  title,\n  backgroundImage,\n  votes,\n  overview,\n  poster,\n  backgroundColor\n}) => {\n  const navigation = useNavigation();\n  const goToDetail = () =>\n    navigation.navigate('Detail', {\n      id,\n      title,\n      backgroundImage,\n      votes,\n      overview,\n      poster,\n      backgroundColor\n    });\n  return (\n    <Container>\n      <BG source={{ uri: apiImage(backgroundImage) }} />\n      <Content>\n        <Poster url={poster} />\n        <Data>\n          <Title>{trimText(title, 30)}</Title>\n          <VotesContainer>\n            <Votes votes={votes} />\n          </VotesContainer>\n          <Overview>{trimText(overview, 80)}</Overview>\n          <Button\n            style={\n              Platform.OS === 'web' ? { marginTop: 15 } : { marginTop: 10 }\n            }\n            color=\"#e74c3c\"\n            theme={{ roundness: 3 }}\n            mode=\"contained\"\n            uppercase={false}\n            compact={true}\n            onPress={goToDetail}\n          >\n            View details\n          </Button>\n        </Data>\n      </Content>\n    </Container>\n  );\n};\n\nSlide.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  backgroundImage: PropTypes.string.isRequired,\n  votes: PropTypes.number.isRequired,\n  overview: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired\n};\n\nexport default Slide;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { useNavigation } from '@react-navigation/native';\nimport Poster from './Poster';\nimport Votes from './Votes';\nimport { trimText } from '../utils';\n\nconst Container = styled.View`\n  align-items: center;\n  margin-right: 20px;\n`;\n\nconst Title = styled.Text`\n  color: white;\n  font-weight: 500;\n  margin: 10px 0px 5px 0px;\n`;\n\nconst Vertical = ({\n  isTv = false,\n  id,\n  poster,\n  title,\n  votes,\n  backgroundColor\n}) => {\n  const navigation = useNavigation();\n  const goToDetai = () => {\n    navigation.navigate('Detail', {\n      isTv,\n      id,\n      title,\n      poster,\n      votes,\n      backgroundColor\n    });\n  };\n  return (\n    <TouchableOpacity onPress={goToDetai}>\n      <Container>\n        <Poster url={poster} />\n        <Title>{trimText(title, 10)}</Title>\n        {votes > 0 && <Votes votes={votes} />}\n      </Container>\n    </TouchableOpacity>\n  );\n};\n\nVertical.propTypes = {\n  id: PropTypes.number.isRequired,\n  poster: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  votes: PropTypes.number.isRequired\n};\n\nexport default Vertical;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport PropTypes from 'prop-types';\nimport { useNavigation } from '@react-navigation/native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport Poster from './Poster';\nimport Votes from './Votes';\nimport { trimText, formatDate } from '../utils';\nconst Container = styled.View`\n  padding: 0px 30px;\n  margin-bottom: 30px;\n  flex-direction: row;\n  align-items: flex-start;\n`;\n\nconst Data = styled.View`\n  align-items: flex-start;\n  width: 65%;\n  margin-left: 25px;\n`;\n\nconst Title = styled.Text`\n  color: white;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nconst ReleaseDate = styled.Text`\n  color: white;\n  opacity: 0.8;\n  font-size: 12px;\n`;\n\nconst Overview = styled.Text`\n  margin-top: 10px;\n  color: white;\n  opacity: 0.8;\n`;\nconst Horizontal = ({\n  isTv = false,\n  id,\n  title,\n  poster,\n  overview,\n  releaseDate,\n  backgroundColor\n}) => {\n  const navigation = useNavigation();\n  const goToDetai = () => {\n    navigation.navigate('Detail', {\n      isTv,\n      id,\n      title,\n      poster,\n      overview,\n      releaseDate,\n      backgroundColor\n    });\n  };\n  return (\n    <TouchableOpacity onPress={goToDetai}>\n      <Container>\n        <Poster url={poster} />\n        <Data>\n          <Title>{trimText(title, 30)}</Title>\n          {releaseDate ? (\n            <ReleaseDate>{formatDate(releaseDate)}</ReleaseDate>\n          ) : null}\n          <Overview>{trimText(overview, 80)}</Overview>\n        </Data>\n      </Container>\n    </TouchableOpacity>\n  );\n};\nHorizontal.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string,\n  poster: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired\n};\n\nexport default Horizontal;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport PropTypes from 'prop-types';\n\nconst Text = styled.Text`\n  color: white;\n  font-weight: bold;\n  font-size: 16px;\n  margin-left: 30px;\n`;\n\nconst Title = ({ title }) => <Text>{title}</Text>;\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default Title;\n","import React from 'react';\nimport Title from './Title';\nimport { ScrollView, View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nconst HorizontalSlider = ({ title, children }) => (\n  <View>\n    <Title title={title} />\n    <ScrollView\n      style={{ marginTop: 20, marginBottom: 40 }}\n      contentContainerStyle={{ paddingLeft: 30 }}\n      horizontal\n      showsHorizontalScrollIndicator={false}\n    >\n      {children}\n    </ScrollView>\n  </View>\n);\n\nHorizontalSlider.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport default HorizontalSlider;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport Title from './Title';\n\nconst Container = styled.View`\n  margin-top: 20px;\n`;\n\nconst List = ({ title, children }) => (\n  <>\n    <Title title={title} />\n    <Container>{children}</Container>\n  </>\n);\n\nexport default List;\n","import React from 'react';\nimport styled from 'styled-components/native';\nimport Swiper from 'react-native-web-swiper';\nimport { Dimensions } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport Slide from '../../components/Movies/Slide';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport Vertical from '../../components/Vertical';\nimport Horizontal from '../../components/Horizontal';\nimport ScrollContainer from '../../components/ScrollContainer';\nimport HorizontalSlider from '../../components/HorizontalSlider';\nimport List from '../../components/List';\n\nconst { width: WIDTH, height: HEIGHT } = Dimensions.get('screen');\n\nconst SliderContainer = styled.View`\n  width: 100%;\n  height: ${HEIGHT / 3}px;\n  margin-bottom: 40px;\n`;\n\nconst Container = styled.View``;\n\nexport default ({ refreshFn, loading, nowPlaying, popular, upcoming }) => (\n  <ScrollContainer\n    refreshFn={refreshFn}\n    loading={loading}\n    backgroundColor={'#1e2465'}\n  >\n    <>\n      <SliderContainer>\n        <Swiper\n          controlsProps={{\n            dotsTouchable: true,\n            prevPos: 'bottom-left',\n            nextPos: 'bottom-right',\n            nextTitle: 'Next',\n            dotsPos: false,\n            nextTitleStyle: {\n              color: 'red',\n              fontSize: 14,\n              fontWeight: '500'\n            },\n            PrevComponent: ({ onPress }) => (\n              <TouchableOpacity onPress={onPress}>\n                <Text\n                  style={{ color: 'tomato', fontSize: 14, fontWeight: '500' }}\n                >\n                  {'Prev'}\n                </Text>\n              </TouchableOpacity>\n            )\n          }}\n          loop\n          timeout={4}\n        >\n          {nowPlaying.map(movie => (\n            <Slide\n              key={movie.id}\n              id={movie.id}\n              title={movie.original_title}\n              overview={movie.overview}\n              votes={movie.vote_average}\n              backgroundImage={movie.backdrop_path}\n              poster={movie.poster_path}\n              backgroundColor={'#1e2465'}\n            />\n          ))}\n        </Swiper>\n      </SliderContainer>\n      <Container>\n        <HorizontalSlider title={'Popular Movies'}>\n          {popular.map(movie => (\n            <Vertical\n              id={movie.id}\n              key={movie.id}\n              poster={movie.poster_path}\n              title={movie.title}\n              votes={movie.vote_average}\n              backgroundColor={'#1e2465'}\n            />\n          ))}\n        </HorizontalSlider>\n\n        <List title=\"Coming Soon\">\n          {upcoming.map(movie => (\n            <Horizontal\n              key={movie.id}\n              id={movie.id}\n              title={movie.title}\n              releaseDate={movie.release_date}\n              poster={movie.poster_path}\n              overview={movie.overview}\n              backgroundColor={'#1e2465'}\n            />\n          ))}\n        </List>\n      </Container>\n    </>\n  </ScrollContainer>\n);\n","import MovieContainer from './MoviesContainer';\nexport default MovieContainer;\n","import React, { useEffect, useState } from 'react';\nimport { movieApi } from '../../api';\nimport MoviesPresenter from './MoviesPresenter';\n\nexport default () => {\n  const [movies, setMovies] = useState({\n    loading: true,\n    nowPlaying: [],\n    popular: [],\n    upcoming: [],\n    nowPlayingError: null,\n    popularError: null,\n    upcomingError: null\n  });\n  const getData = async () => {\n    const [nowPlaying, nowPlayingError] = await movieApi.nowPlaying();\n    const [popular, popularError] = await movieApi.popular();\n    const [upcoming, upcomingError] = await movieApi.upcoming();\n    setMovies({\n      loading: false,\n      nowPlaying,\n      popular,\n      upcoming,\n      nowPlayingError,\n      popularError,\n      upcomingError\n    });\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return <MoviesPresenter refreshFn={getData} {...movies} />;\n};\n","import React from 'react';\nimport ScrollContainer from '../../components/ScrollContainer';\nimport HorizontalSlider from '../../components/HorizontalSlider';\nimport Vertical from '../../components/Vertical';\nimport Horizontal from '../../components/Horizontal';\nimport styled from 'styled-components/native';\nimport List from '../../components/List';\n\nconst Container = styled.View`\n  margin-top: 30px;\n`;\n\nexport default ({ refreshFn, loading, popular, topRated, today }) => (\n  <ScrollContainer\n    refreshFn={refreshFn}\n    loading={loading}\n    backgroundColor={'#3e2465'}\n  >\n    <Container>\n      <HorizontalSlider title=\"Popular Shows\">\n        {popular.map(show => (\n          <Vertical\n            isTv={true}\n            id={show.id}\n            key={show.id}\n            poster={show.poster_path}\n            title={show.name}\n            votes={show.vote_average}\n            backgroundColor={'#3e2465'}\n          />\n        ))}\n      </HorizontalSlider>\n      <HorizontalSlider title=\"Top Rated\">\n        {topRated.map(show => (\n          <Vertical\n            isTv={true}\n            id={show.id}\n            key={show.id}\n            poster={show.poster_path}\n            title={show.name}\n            votes={show.vote_average}\n            backgroundColor={'#3e2465'}\n          />\n        ))}\n      </HorizontalSlider>\n      <List title=\"Airing Today\">\n        {today.map(show => (\n          <Horizontal\n            isTv={true}\n            key={show.id}\n            id={show.id}\n            title={show.name}\n            poster={show.poster_path}\n            overview={show.overview}\n            backgroundColor={'#3e2465'}\n          />\n        ))}\n      </List>\n    </Container>\n  </ScrollContainer>\n);\n","import Container from './TvContainer';\nexport default Container;\n","import React, { useEffect, useState } from 'react';\nimport { tvApi } from '../../api';\nimport TvPresenter from './TvPresenter';\n\nexport default () => {\n  const [shows, setShows] = useState({\n    loading: true,\n    today: [],\n    thisWeek: [],\n    topRated: [],\n    popular: [],\n    todayError: null,\n    thisWeekError: null,\n    topRatedError: null,\n    popularError: null\n  });\n  const getData = async () => {\n    const [today, todayError] = await tvApi.today();\n    const [thisWeek, thisWeekError] = await tvApi.thisWeek();\n    const [topRated, topRatedError] = await tvApi.topRated();\n    const [popular, popularError] = await tvApi.popular();\n    setShows({\n      loading: false,\n      today,\n      thisWeek,\n      topRated,\n      popular,\n      todayError,\n      thisWeekError,\n      topRatedError,\n      popularError\n    });\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return <TvPresenter refreshFn={getData} {...shows} />;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Searchbar } from 'react-native-paper';\n\nconst Input = ({ placeholder, value, onChange, onSubmit }) => (\n  <Searchbar\n    style={{\n      marginHorizontal: 30,\n      marginVertical: 0,\n      paddingHorizontal: 10,\n      marginBottom: 50\n    }}\n    theme={{ roundness: 30 }}\n    placeholder={placeholder}\n    returnKeyType={'search'}\n    onChangeText={onChange}\n    onSubmitEditing={onSubmit}\n    value={value}\n  />\n);\n\nInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from '../../components/Search/Input';\nimport HorizontalSlider from '../../components/HorizontalSlider';\nimport Vertical from '../../components/Vertical';\nimport ScrollContainer from '../../components/ScrollContainer';\n\nexport default ({ movies, shows, keyword, onChange, onSubmit }) => (\n  <ScrollContainer\n    refreshFn={onSubmit}\n    loading={false}\n    backgroundColor={'#6e2465'}\n    contentContainerStyle={{\n      paddingTop: 10\n    }}\n  >\n    <Input\n      placeholder={'Write a keyword'}\n      value={keyword}\n      onChange={onChange}\n      onSubmit={onSubmit}\n    />\n    {movies.length !== 0 && (\n      <HorizontalSlider title={'Movie Results'}>\n        {movies.map(movie => (\n          <Vertical\n            key={movie.id}\n            id={movie.id}\n            votes={movie.vote_average}\n            title={movie.title}\n            poster={movie.poster_path || movie.backdrop_path}\n            backgroundColor={'#6e2465'}\n          />\n        ))}\n      </HorizontalSlider>\n    )}\n    {shows.length !== 0 && (\n      <HorizontalSlider title={'TV Results'}>\n        {shows.map(show => (\n          <Vertical\n            isTv={true}\n            key={show.id}\n            id={show.id}\n            votes={show.vote_average}\n            title={show.name}\n            poster={show.poster_path}\n            backgroundColor={'#6e2465'}\n          />\n        ))}\n      </HorizontalSlider>\n    )}\n  </ScrollContainer>\n);\n","import SearchContainer from './SearchContainer';\nexport default SearchContainer;\n","import React, { useState } from 'react';\nimport SearchPresenter from './SearchPresenter';\nimport { movieApi, tvApi } from '../../api';\n\nexport default () => {\n  const [keyword, setKeyword] = useState('');\n  const [results, setResults] = useState({\n    movies: [],\n    shows: [],\n    movieError: null,\n    showsError: null\n  });\n  const onChange = text => setKeyword(text);\n  const search = async () => {\n    if (keyword === '') {\n      return;\n    }\n    const [movies, movieError] = await movieApi.search(keyword);\n    const [shows, showsError] = await tvApi.search(keyword);\n    setResults({\n      movies,\n      shows,\n      movieError,\n      showsError\n    });\n  };\n\n  return (\n    <SearchPresenter\n      {...results}\n      onChange={onChange}\n      onSubmit={search}\n      keyword={keyword}\n    />\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { PanResponder, Dimensions, Animated } from 'react-native';\nimport styled from 'styled-components/native';\nimport { apiImage } from '../../api';\n\nconst { width: WIDTH, height: HEIGHT } = Dimensions.get('window');\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: #be2465;\n  align-items: center;\n`;\n\nconst Poster = styled.Image`\n  border-radius: 20px;\n  width: 100%;\n  height: 100%;\n`;\n\nconst styles = {\n  top: 50,\n  height: HEIGHT / 1.5,\n  width: '90%',\n  position: 'absolute'\n};\n\nexport default ({ results }) => {\n  const [topIndex, setTopIndex] = useState(0);\n  const nextCard = () => setTopIndex(currentValue => currentValue + 1);\n  const position = new Animated.ValueXY();\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onPanResponderMove: (evt, { dx, dy }) => {\n      position.setValue({ x: dx, y: dy });\n    },\n    onPanResponderRelease: (evt, { dx, dy }) => {\n      if (dx >= 150) {\n        Animated.spring(position, {\n          toValue: {\n            x: WIDTH + 100,\n            y: dy\n          }\n        }).start(nextCard);\n      } else if (dx <= -150) {\n        Animated.spring(position, {\n          toValue: {\n            x: -WIDTH - 100,\n            y: dy\n          }\n        }).start(nextCard);\n      } else {\n        Animated.spring(position, {\n          toValue: {\n            x: 0,\n            y: 0\n          }\n        }).start();\n      }\n    }\n  });\n  const roationValues = position.x.interpolate({\n    inputRange: [-255, 0, 255],\n    outputRange: ['-8deg', '0deg', '8deg'],\n    extrapolate: 'clamp'\n  });\n  const secondCardOpacity = position.x.interpolate({\n    inputRange: [-255, 0, 255],\n    outputRange: [1, 0.2, 1],\n    extrapolate: 'clamp'\n  });\n  const secondCardScale = position.x.interpolate({\n    inputRange: [-255, 0, 255],\n    outputRange: [1, 0.8, 1],\n    extrapolate: 'clamp'\n  });\n  useEffect(() => {\n    position.setValue({ x: 0, y: 0 });\n  }, [topIndex]);\n  return (\n    <Container>\n      {results.map((result, index) => {\n        if (index < topIndex) {\n          return null;\n        } else if (index === topIndex) {\n          return (\n            <Animated.View\n              style={{\n                ...styles,\n                zIndex: 1,\n                transform: [\n                  { rotate: roationValues },\n                  ...position.getTranslateTransform()\n                ]\n              }}\n              key={result.id}\n              {...panResponder.panHandlers}\n            >\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\n            </Animated.View>\n          );\n        } else if (index === topIndex + 1) {\n          return (\n            <Animated.View\n              style={{\n                ...styles,\n                zIndex: -index,\n                opacity: secondCardOpacity,\n                transform: [{ scale: secondCardScale }]\n              }}\n              key={result.id}\n              {...panResponder.panHandlers}\n            >\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\n            </Animated.View>\n          );\n        } else {\n          return (\n            <Animated.View\n              style={{\n                ...styles,\n                zIndex: -index,\n                opacity: 0\n              }}\n              key={result.id}\n              {...panResponder.panHandlers}\n            >\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\n            </Animated.View>\n          );\n        }\n      })}\n    </Container>\n  );\n};\n","import FavsContainer from './FavsContainer';\nexport default FavsContainer;\n","import React, { useState, useEffect } from 'react';\nimport FavsPresenter from './FavsPresenter';\nimport { movieApi } from '../../api';\n\nexport default () => {\n  const [movies, setMovies] = useState({\n    results: [],\n    error: null\n  });\n  const getData = async () => {\n    const [results, error] = await movieApi.discover();\n    setMovies({\n      results,\n      error\n    });\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return <FavsPresenter {...movies} />;\n};\n","import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Detail from '../screens/Detail';\nimport Movies from '../screens/Movies';\nimport Tv from '../screens/Tv';\nimport Search from '../screens/Search';\nimport Favs from '../screens/Favs';\nconst Stack = createStackNavigator();\n\nexport const a = () => (\n  <Stack.Navigator\n    screenOptions={{\n      headerStyle: {\n        backgroundColor: '#1e2465',\n        borderBottomColor: '#1e2465',\n        shadowColor: '#1e2465'\n      },\n      headerTintColor: 'white',\n      headerBackTitleVisible: false\n    }}\n  >\n    <Stack.Screen name=\"Movies\" component={Movies} />\n    <Stack.Screen name=\"Detail\" component={Detail} />\n  </Stack.Navigator>\n);\nexport const b = () => (\n  <Stack.Navigator\n    screenOptions={{\n      headerStyle: {\n        backgroundColor: '#3e2465',\n        borderBottomColor: '#3e2465',\n        shadowColor: '#3e2465'\n      },\n      headerTintColor: 'white',\n      headerBackTitleVisible: false\n    }}\n  >\n    <Stack.Screen name=\"TV\" component={Tv} />\n    <Stack.Screen name=\"Detail\" component={Detail} />\n  </Stack.Navigator>\n);\nexport const c = () => (\n  <Stack.Navigator\n    screenOptions={{\n      headerStyle: {\n        backgroundColor: '#6e2465',\n        borderBottomColor: '#6e2465',\n        shadowColor: '#6e2465'\n      },\n      headerTintColor: 'white',\n      headerBackTitleVisible: false\n    }}\n  >\n    <Stack.Screen name=\"Search\" component={Search} />\n    <Stack.Screen name=\"Detail\" component={Detail} />\n  </Stack.Navigator>\n);\nexport const d = () => (\n  <Stack.Navigator\n    screenOptions={{\n      headerStyle: {\n        backgroundColor: '#be2465',\n        borderBottomColor: '#be2465',\n        shadowColor: '#be2465'\n      },\n      headerTintColor: 'white',\n      headerBackTitleVisible: false\n    }}\n  >\n    <Stack.Screen name=\"Discovery\" component={Favs} />\n    <Stack.Screen name=\"Detail\" component={Detail} />\n  </Stack.Navigator>\n);\n","import React from 'react';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Platform } from 'react-native';\nimport { a, b, c, d } from './Stack';\n\nconst Tabs = createMaterialBottomTabNavigator();\n\nexport default () => {\n  return (\n    <Tabs.Navigator\n      activeColor=\"#f0edf6\"\n      inactiveColor=\"#3e2465\"\n      barStyle={{ backgroundColor: '#694fad' }}\n      initialRouteName=\"Movies\"\n    >\n      <Tabs.Screen\n        options={{\n          tabBarColor: '#1e2465',\n          tabBarIcon: ({ focused }) => (\n            <Ionicons\n              name={Platform.OS === 'ios' ? 'ios-film' : 'md-film'}\n              color={focused ? 'white' : 'grey'}\n              size={26}\n            />\n          )\n        }}\n        name=\"Movies\"\n        component={a}\n      />\n      <Tabs.Screen\n        options={{\n          tabBarColor: '#3e2465',\n          tabBarIcon: ({ focused }) => (\n            <Ionicons\n              name={Platform.OS === 'ios' ? 'ios-tv' : 'md-tv'}\n              color={focused ? 'white' : 'grey'}\n              size={26}\n            />\n          )\n        }}\n        name=\"TV\"\n        component={b}\n      />\n      <Tabs.Screen\n        options={{\n          tabBarColor: '#6e2465',\n          tabBarIcon: ({ focused }) => (\n            <Ionicons\n              name={Platform.OS === 'ios' ? 'ios-search' : 'md-search'}\n              color={focused ? 'white' : 'grey'}\n              size={26}\n            />\n          )\n        }}\n        name=\"Search\"\n        component={c}\n      />\n      <Tabs.Screen\n        options={{\n          tabBarColor: '#be2465',\n          tabBarIcon: ({ focused }) => (\n            <Ionicons\n              name={Platform.OS === 'ios' ? 'ios-heart' : 'md-heart'}\n              color={focused ? 'white' : 'grey'}\n              size={26}\n            />\n          )\n        }}\n        name=\"Discovery\"\n        component={d}\n      />\n    </Tabs.Navigator>\n  );\n};\n","import 'react-native-gesture-handler';\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Image, StatusBar } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Asset } from 'expo-asset';\nimport { Ionicons, FontAwesome } from '@expo/vector-icons';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport Tabs from './navigation/Tabs';\nconst cacheImages = images =>\n  images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n\nconst cacheFonts = fonts =>\n  fonts.map(font => [Font.loadAsync(font), Font.loadAsync(font)]);\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false);\n  const loadAssets = () => {\n    const images = cacheImages([\n      'https://images.unsplash.com/photo-1571847140471-1d7766e825ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=673&q=80',\n      require('./assets/splash.png')\n    ]);\n    const fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\n    return Promise.all([...images, ...fonts]);\n  };\n  const onFinish = () => setIsReady(true);\n  return isReady ? (\n    <PaperProvider>\n      <NavigationContainer>\n        <Tabs />\n      </NavigationContainer>\n      <StatusBar barStyle=\"light-content\" />\n    </PaperProvider>\n  ) : (\n    <AppLoading\n      startAsync={loadAssets}\n      onFinish={onFinish}\n      onError={console.error}\n    />\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/splash.43ec0dcb.png\";"],"sourceRoot":""}